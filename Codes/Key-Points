1. What is INIT Container ? 

An Init Container is a special type of container that runs before the main container in a Pod.
It ensures that all the required setup or dependencies are ready (like downloading files, checking services, etc.) 
before the main application starts.

It runs only once per Pod — at Pod creation. If POD restarts it will not run INIT Again.
If an Init Container fails, the kubelet keeps restarting it until it succeeds.

NOTE: The init container will start runs once the pod created, But the main container will run once the init container success

      Pod is created → Init container runs → If success → Main container runs 
Else: 

ERROR: INIT: Error ( k get pods)


2. Understanding the Logic of HPA.

resources:
  limits:
    cpu: "256m"
    memory: "256Mi"
  requests:
    cpu: "200m"
    memory: "128Mi"

 - Question 1: What Happens if your cpu > 256m and the memory is < 256mi ?

So here the CPU utilisation is crossed it's threshold, the container may throttled so it slowdown the container but container was not deleted.
If we enable the HPA then a new container will be created and yes we have the old container as well, but it is slow. 

- Question 2: What Happens if your cpu < 256m and the memory is > 256mi ?

So as the POD memory is Full, it goes to OutOfMemory ERROR (CrashLoopBackOff may appear), So it deletes the pod and restarts the same pod. 
In this case it will not scale out it just restarts the same pod.

- Question 3: What is the purpose of requests ?

When HPA creates a new Pod, the Kubernetes Scheduler ensures that the target node has at least 200m CPU and 128Mi memory available, 
based on the Pod’s requests.

- Question 4: If you have 3 replicas and all are out of memory and CPU is beyond threshold, So is application accessible ?

No, As the PODS are continously killed and restared the same pods, the application will be un-available and it throws error like :502 (Bad Gateway) or 503 (Service Unavailable).
we have to manulayy increase the memory limit or enable vertical Pod scaling.



3. Understanding of ReplicaSet / Deployments ?

- Question 1: You deployed an application in Kubernetes using a ReplicaSet. After a month, 
              you updated the version from v1 to v2. Will the ReplicaSet create new Pods automatically ?

No, a ReplicaSet will not automatically create new Pods if you update the version (e.g., change the container image from v1 to v2) and run kubectl apply.
Reason: ReplicaSet does not detect changes in the Pod template (like image version).  
It only ensures that the specified number of Pods are running — it does not manage rolling updates. (Use Deployment For Such Cases)

You can upgrade the pods from V1 to V2, By Deleting the pods and recreate (or) scale down and scale up. During this process it deletes the pods and creates a new pods.
So all new pods will create with V2 version.


- Question 2: You deployed an application in Kubernetes using a Deployment. After a month, 
              you updated the version from v1 to v2. Will the Deployment create new Pods automatically ?

When using a Deployment, if you update the container image (e.g., from v1 to v2) and run kubectl apply,
Kubernetes automatically creates a new ReplicaSet, starts a rolling update, creates new Pods with v2, and gradually deletes the old Pods with v1.


